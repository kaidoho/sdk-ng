From 44feccff77217f312acca8625269c2cfe8b50195 Mon Sep 17 00:00:00 2001
From: Markus Moessner <Markus.Moessner@sick.de>
Date: Thu, 9 Jan 2020 17:02:04 +0100
Subject: [PATCH] Add zephyr os

---
 config/arch/powerpc.in         |  2 +-
 config/binutils.in             |  2 +-
 config/binutils/binutils.in    |  1 +
 config/cc.in                   |  4 ++--
 config/cc/gcc.in               |  3 ++-
 config/debug/duma.in           |  1 +
 config/debug/gdb.in.native     |  8 ++++---
 config/kernel.in               |  4 ++++
 config/kernel/zephyr.in        |  6 ++++++
 config/libc.in                 |  1 +
 config/libc/bionic.in          |  2 +-
 config/libc/glibc.in           |  2 +-
 config/libc/moxiebox.in        |  2 +-
 config/libc/musl.in            |  2 +-
 config/libc/newlib.in          | 16 +-------------
 config/libc/uClibc.in          |  2 +-
 config/toolchain.in            |  3 ++-
 scripts/build/cc/gcc.sh        | 47 ++++++++++++++++++++++++++++++++++++++----
 scripts/build/internals.sh     | 15 ++++++++++++++
 scripts/build/kernel/zephyr.sh | 24 +++++++++++++++++++++
 scripts/config.sub             |  2 +-
 21 files changed, 115 insertions(+), 34 deletions(-)
 create mode 100644 config/kernel/zephyr.in
 create mode 100644 scripts/build/kernel/zephyr.sh

diff --git a/config/arch/powerpc.in b/config/arch/powerpc.in
index 40d88b9..ffdff24 100644
--- a/config/arch/powerpc.in
+++ b/config/arch/powerpc.in
@@ -35,7 +35,7 @@ config ARCH_powerpc_ABI_DEFAULT
 config ARCH_powerpc_ABI_EABI
     bool
     prompt "EABI"
-    depends on BARE_METAL
+    depends on BARE_METAL || CT_KERNEL_ZEPHYR
     help
       The Embedded ABI (stack alignment of 8 bytes, etc).
 
diff --git a/config/binutils.in b/config/binutils.in
index c4762aa..6df4ab9 100644
--- a/config/binutils.in
+++ b/config/binutils.in
@@ -9,7 +9,7 @@ choice
 config ARCH_BINFMT_ELF
     bool
     prompt "ELF"
-    depends on ARCH_USE_MMU || BARE_METAL
+    depends on ARCH_USE_MMU || BARE_METAL || CT_KERNEL_ZEPHYR
     help
       This will make your system build ELF executables,
       suitable for architectures with an MMU.
diff --git a/config/binutils/binutils.in b/config/binutils/binutils.in
index 928659a..77a2455 100644
--- a/config/binutils/binutils.in
+++ b/config/binutils/binutils.in
@@ -171,6 +171,7 @@ config BINUTILS_FOR_TARGET
     bool
     prompt "binutils libraries for the target"
     depends on ! BARE_METAL
+    depends on ! CT_KERNEL_ZEPHYR
     help
       Some utilities may need binutils libraries to be available on
       the target, eg. oprofile.
diff --git a/config/cc.in b/config/cc.in
index 187a48d..dba0474 100644
--- a/config/cc.in
+++ b/config/cc.in
@@ -58,7 +58,7 @@ config CC_LANG_FORTRAN
       Only select this if you know that your specific version of the
       compiler supports this language.
 
-if ! BARE_METAL
+if ! BARE_METAL && ! CT_KERNEL_ZEPHYR
 
 config CC_LANG_JAVA
     bool
@@ -114,7 +114,7 @@ config CC_LANG_GOLANG
       Only select this if you know that your specific version of the
       compiler supports this language.
 
-endif # ! BARE_METAL
+endif # ! BARE_METAL && ! CT_KERNEL_ZEPHYR
 
 config CC_LANG_OTHERS
     string
diff --git a/config/cc/gcc.in b/config/cc/gcc.in
index be7d055..26438cf 100644
--- a/config/cc/gcc.in
+++ b/config/cc/gcc.in
@@ -277,7 +277,7 @@ config CC_CXA_ATEXIT
     bool
     prompt "Use __cxa_atexit"
     default y
-    depends on ! BARE_METAL || LIBC_PROVIDES_CXA_ATEXIT
+    depends on (! BARE_METAL && ! CT_KERNEL_ZEPHYR ) || LIBC_PROVIDES_CXA_ATEXIT
     help
       If you get the missing symbol "__cxa_atexit" when building C++ programs,
       you might want to try disabling this option.
@@ -297,6 +297,7 @@ config CC_GCC_SJLJ_EXCEPTIONS
     tristate
     prompt "Use sjlj for exceptions"
     depends on ! BARE_METAL
+    depends on ! CT_KERNEL_ZEPHYR
     default m
     help
       'sjlj' is short for setjmp/longjmp.
diff --git a/config/debug/duma.in b/config/debug/duma.in
index bc69e17..cadcd69 100644
--- a/config/debug/duma.in
+++ b/config/debug/duma.in
@@ -1,6 +1,7 @@
 # D.U.M.A. - Detect Unintended Memory Access - Memory checker
 
 ## depends on ! BARE_METAL
+## depends on ! CT_KERNEL_ZEPHYR
 ## depends on ! LIBC_BIONIC
 
 ## help D.U.M.A. - Detect Unintended Memory Access
diff --git a/config/debug/gdb.in.native b/config/debug/gdb.in.native
index 917a770..d37906a 100644
--- a/config/debug/gdb.in.native
+++ b/config/debug/gdb.in.native
@@ -4,6 +4,7 @@ config GDB_NATIVE
     bool
     prompt "Native gdb"
     depends on ! BARE_METAL
+    depends on ! CT_KERNEL_ZEPHYR
     depends on ! LIBC_BIONIC
     depends on CC_LANG_CXX || !GDB_8_0_or_later
     select LIBC_UCLIBC_WCHAR if LIBC_UCLIBC && GDB_8_0_or_later
@@ -18,6 +19,7 @@ config GDB_GDBSERVER
     prompt "gdbserver"
     default y
     depends on ! BARE_METAL
+    depends on ! CT_KERNEL_ZEPHYR
     select LIBC_UCLIBC_WCHAR if LIBC_UCLIBC && GDB_8_0_or_later
     select LIBC_UCLIBC_IPV6 if LIBC_UCLIBC && GDB_8_3_or_later
     help
@@ -76,7 +78,7 @@ config GDB_NATIVE_STATIC_LIBSTDCXX
 
 endif # GDB_NATIVE
 
-if BARE_METAL
-comment "In bare-metal, you'll need to   "
+if BARE_METAL || CT_KERNEL_ZEPHYR
+comment "In bare-metal or CT_KERNEL_ZEPHYR, you'll need to   "
 comment "provide your own gdbserver stub."
-endif # BARE_METAL
+endif # BARE_METAL || CT_KERNEL_ZEPHYR
diff --git a/config/kernel.in b/config/kernel.in
index 5c8a519..df74dc6 100644
--- a/config/kernel.in
+++ b/config/kernel.in
@@ -12,6 +12,10 @@ config BARE_METAL
 config WINDOWS
     bool
 
+
+config CT_KERNEL_ZEPHYR
+    bool
+
 # Each target OS (aka kernel) that support shared libraries can select
 # this, so the user can decide whether or not to build a shared library
 # enabled toolchain
diff --git a/config/kernel/zephyr.in b/config/kernel/zephyr.in
new file mode 100644
index 0000000..4515cb8
--- /dev/null
+++ b/config/kernel/zephyr.in
@@ -0,0 +1,6 @@
+# Zephyr config options
+
+## no-package
+## select ZEPHYR
+##
+## help Build a toolchain targeting systems running Zephyr as host
diff --git a/config/libc.in b/config/libc.in
index c132fc6..59bc5d6 100644
--- a/config/libc.in
+++ b/config/libc.in
@@ -95,6 +95,7 @@ config LIBC_XLDD
     prompt "Install a cross ldd-like helper"
     depends on SHARED_LIBS
     depends on ! BARE_METAL
+    depends on ! CT_KERNEL_ZEPHYR
     default y
     help
       Say 'Y' here if you want to have a ldd-like helper that
diff --git a/config/libc/bionic.in b/config/libc/bionic.in
index 558c2b4..c47896d 100644
--- a/config/libc/bionic.in
+++ b/config/libc/bionic.in
@@ -1,7 +1,7 @@
 # bionic options
 
 ## package android-ndk
-## depends on ! WINDOWS && ! BARE_METAL
+## depends on ! WINDOWS && ! BARE_METAL && ! CT_KERNEL_ZEPHYR
 ## depends on ARCH_ARM || ARCH_MIPS || ARCH_X86
 ## depends on EXPERIMENTAL
 ## select GCC_REQUIRE_6_or_later
diff --git a/config/libc/glibc.in b/config/libc/glibc.in
index c753359..a77c9b1 100644
--- a/config/libc/glibc.in
+++ b/config/libc/glibc.in
@@ -1,7 +1,7 @@
 # This file contains the common configuration options
 # that apply to both glibc.
 
-## depends on ! WINDOWS && ! BARE_METAL && ARCH_USE_MMU
+## depends on ! WINDOWS && ! BARE_METAL && ARCH_USE_MMU && ! CT_KERNEL_ZEPHYR
 ## select LIBC_SUPPORT_THREADS_NATIVE
 ## select CC_CORE_PASSES_NEEDED
 # TBD: select GETTEXT for build only, not for host
diff --git a/config/libc/moxiebox.in b/config/libc/moxiebox.in
index e036641..2912b17 100644
--- a/config/libc/moxiebox.in
+++ b/config/libc/moxiebox.in
@@ -5,7 +5,7 @@
 
 ## depends on ARCH_MOXIE
 ## depends on ARCH_LE
-## depends on BARE_METAL
+## depends on BARE_METAL || CT_KERNEL_ZEPHYR
 ## select LIBC_NEWLIB_SHOW
 ## select LIBC_SUPPORT_THREADS_NONE
 ## select COMP_TOOLS_AUTOCONF if !CONFIGURE_has_autoconf_2_65_or_newer || !CONFIGURE_has_autoreconf_2_64_or_newer
diff --git a/config/libc/musl.in b/config/libc/musl.in
index b2ed8bf..9127c11 100644
--- a/config/libc/musl.in
+++ b/config/libc/musl.in
@@ -1,6 +1,6 @@
 # musl second-part option
 
-## depends on ! WINDOWS && ! BARE_METAL
+## depends on ! WINDOWS && ! BARE_METAL && ! CT_KERNEL_ZEPHYR
 ## depends on EXPERIMENTAL
 ## select LIBC_SUPPORT_THREADS_NATIVE
 ## select CC_CORE_PASSES_NEEDED
diff --git a/config/libc/newlib.in b/config/libc/newlib.in
index d84db70..2b49355 100644
--- a/config/libc/newlib.in
+++ b/config/libc/newlib.in
@@ -1,6 +1,6 @@
 # newlib options
 
-## depends on BARE_METAL
+## depends on BARE_METAL || CT_KERNEL_ZEPHYR
 ## select LIBC_SUPPORT_THREADS_NONE
 ## select CC_CORE_PASSES_NEEDED if CANADIAN
 ## select CC_CORE_PASS_2_NEEDED if ! CANADIAN
@@ -152,13 +152,6 @@ config LIBC_NEWLIB_MULTITHREAD
     help
         Enable support for multiple threads.
 
-config LIBC_NEWLIB_RETARGETABLE_LOCKING
-    bool
-    prompt "Enable retargetable locking"
-    help
-        Enable retargetable locking to allow the operating system to override
-        the dummy lock functions defined within the newlib.
-
 config LIBC_NEWLIB_EXTRA_SECTIONS
     bool
     prompt "Place each function & data element in their own section"
@@ -362,13 +355,6 @@ config LIBC_NANO_NEWLIB_MULTITHREAD
     help
         Enable support for multiple threads.
 
-config LIBC_NANO_NEWLIB_RETARGETABLE_LOCKING
-    bool
-    prompt "Enable retargetable locking"
-    help
-        Enable retargetable locking to allow the operating system to override
-        the dummy lock functions defined within the newlib.
-
 config LIBC_NANO_NEWLIB_EXTRA_SECTIONS
     bool
     prompt "Place each function & data element in their own section"
diff --git a/config/libc/uClibc.in b/config/libc/uClibc.in
index 21da64f..c416e7b 100644
--- a/config/libc/uClibc.in
+++ b/config/libc/uClibc.in
@@ -1,6 +1,6 @@
 # uClibc options
 
-## depends on ! WINDOWS && ! BARE_METAL
+## depends on ! WINDOWS && ! BARE_METAL && ! CT_KERNEL_ZEPHYR
 ##
 ## select LIBC_SUPPORT_THREADS_LT
 ## select LIBC_SUPPORT_THREADS_NONE
diff --git a/config/toolchain.in b/config/toolchain.in
index 36a4782..a39b9e1 100644
--- a/config/toolchain.in
+++ b/config/toolchain.in
@@ -4,13 +4,14 @@ comment "General toolchain options"
 
 config FORCE_SYSROOT
     bool
-    default y if !OBSOLETE && !BARE_METAL
+    default y if !OBSOLETE && (!BARE_METAL && !CT_KERNEL_ZEPHYR)
     select USE_SYSROOT
 
 config USE_SYSROOT
     bool
     prompt "Use sysroot'ed toolchain"
     depends on !BARE_METAL
+    depends on !CT_KERNEL_ZEPHYR
     default y
     help
       Use the 'shiny new' sysroot feature of gcc: libraries split between
diff --git a/scripts/build/cc/gcc.sh b/scripts/build/cc/gcc.sh
index 642fada..7406174 100644
--- a/scripts/build/cc/gcc.sh
+++ b/scripts/build/cc/gcc.sh
@@ -267,7 +267,7 @@ do_cc_core_pass_2() {
 # This function is used to build the core C compiler.
 # Usage: do_gcc_core_backend param=value [...]
 #   Parameter           : Definition                                : Type      : Default
-#   mode                : build a 'static', 'shared' or 'baremetal' : string    : (none)
+#   mode                : build a 'static', 'shared', 'zephyr' or 'baremetal' : string    : (none)
 #   host                : the machine the core will run on          : tuple     : (none)
 #   prefix              : dir prefix to install into                : dir       : (none)
 #   complibs            : dir where complibs are installed          : dir       : (none)
@@ -281,7 +281,7 @@ do_cc_core_pass_2() {
 #   ldflags             : ldflags to use                            : string    : (empty)
 #   build_step          : build step 'core1', 'core2', 'gcc_build',
 #                         'libstdcxx_nano' or 'gcc_host'            : string    : (none)
-# Usage: do_gcc_core_backend mode=[static|shared|baremetal] build_libgcc=[yes|no] build_staticlinked=[yes|no]
+# Usage: do_gcc_core_backend mode=[static|shared|zephyr|baremetal] build_libgcc=[yes|no] build_staticlinked=[yes|no]
 do_gcc_core_backend() {
     local mode
     local build_libgcc=no
@@ -311,7 +311,7 @@ do_gcc_core_backend() {
         eval "${arg// /\\ }"
     done
 
-    # This function gets called in case of a bare metal compiler for the final gcc, too.
+    # This function gets called in case of a zephyr / bare metal compiler for the final gcc, too.
     case "${build_step}" in
         core1|core2)
             CT_DoLog EXTRA "Configuring core C gcc compiler"
@@ -349,13 +349,18 @@ do_gcc_core_backend() {
         shared)
             extra_config+=("--enable-shared")
             ;;
+        zephyr)
+            extra_config+=("--with-newlib")
+            extra_config+=("--enable-threads=zephyr")
+            extra_config+=("--disable-shared")
+            ;;           
         baremetal)
             extra_config+=("--with-newlib")
             extra_config+=("--enable-threads=no")
             extra_config+=("--disable-shared")
             ;;
         *)
-            CT_Abort "Internal Error: 'mode' must be one of: 'static', 'shared' or 'baremetal', not '${mode:-(empty)}'"
+            CT_Abort "Internal Error: 'mode' must be one of: 'static', 'shared', 'zephyr' or 'baremetal', not '${mode:-(empty)}'"
             ;;
     esac
 
@@ -378,6 +383,9 @@ do_gcc_core_backend() {
     if [ -n "${CT_CC_GCC_ENABLE_CXX_FLAGS}" \
             -a "${mode}" = "baremetal" ]; then
         extra_config+=("--enable-cxx-flags=${CT_CC_GCC_ENABLE_CXX_FLAGS}")
+    elif [ -n "${CT_CC_GCC_ENABLE_CXX_FLAGS}" \
+            -a "${mode}" = "zephyr" ]; then
+        extra_config+=("--enable-cxx-flags=${CT_CC_GCC_ENABLE_CXX_FLAGS}")
     fi
 
     extra_config+=(--disable-libgomp)
@@ -660,6 +668,10 @@ do_gcc_core_backend() {
             repair_cc="CC_FOR_BUILD=${CT_BUILD}-gcc \
                        CXX_FOR_BUILD=${CT_BUILD}-g++ \
                        GCC_FOR_TARGET=${CT_TARGET}-${CT_CC}"
+        elif [ "${CT_KERNEL_ZEPHYR},${CT_CANADIAN}" = "y,y" ]; then
+            repair_cc="CC_FOR_BUILD=${CT_BUILD}-gcc \
+                       CXX_FOR_BUILD=${CT_BUILD}-g++ \
+                       GCC_FOR_TARGET=${CT_TARGET}-${CT_CC}"                      
         else
             repair_cc=""
         fi
@@ -772,6 +784,15 @@ do_cc_for_build() {
             build_final_opts+=( "build_staticlinked=yes" )
         fi
         build_final_backend=do_gcc_core_backend
+    elif [ "${CT_KERNEL_ZEPHYR}" = "y" ]; then
+        build_final_opts+=( "mode=zephyr" )
+        build_final_opts+=( "build_libgcc=yes" )
+        build_final_opts+=( "build_libstdcxx=yes" )
+        build_final_opts+=( "build_libgfortran=yes" )
+        if [ "${CT_STATIC_TOOLCHAIN}" = "y" ]; then
+            build_final_opts+=( "build_staticlinked=yes" )
+        fi
+        build_final_backend=do_gcc_core_backend
     else
         build_final_backend=do_gcc_backend
     fi
@@ -861,6 +882,15 @@ do_cc_for_host() {
             final_opts+=( "build_staticlinked=yes" )
         fi
         final_backend=do_gcc_core_backend
+    elif [ "${CT_KERNEL_ZEPHYR}" = "y" ]; then
+        final_opts+=( "mode=zephyr" )
+        final_opts+=( "build_libgcc=yes" )
+        final_opts+=( "build_libstdcxx=yes" )
+        final_opts+=( "build_libgfortran=yes" )
+        if [ "${CT_STATIC_TOOLCHAIN}" = "y" ]; then
+            final_opts+=( "build_staticlinked=yes" )
+        fi
+        final_backend=do_gcc_core_backend
     else
         final_backend=do_gcc_backend
     fi
@@ -908,6 +938,15 @@ do_cc_libstdcxx_nano()
                 final_opts+=( "build_staticlinked=yes" )
             fi
             final_backend=do_gcc_core_backend
+        elif [ "${CT_KERNEL_ZEPHYR}" = "y" ]; then
+            final_opts+=( "mode=zephyr" )
+            final_opts+=( "build_libgcc=yes" )
+            final_opts+=( "build_libstdcxx=yes" )
+            final_opts+=( "build_libgfortran=yes" )
+            if [ "${CT_STATIC_TOOLCHAIN}" = "y" ]; then
+                final_opts+=( "build_staticlinked=yes" )
+            fi
+            final_backend=do_gcc_core_backend
         else
             final_backend=do_gcc_backend
         fi
diff --git a/scripts/build/internals.sh b/scripts/build/internals.sh
index ed9e2b1..a249320 100644
--- a/scripts/build/internals.sh
+++ b/scripts/build/internals.sh
@@ -117,8 +117,23 @@ do_finish() {
                "${CT_LIB_DIR}/scripts/populate.in"         \
                >"${CT_PREFIX_DIR}/bin/${CT_TARGET}-populate"
         CT_DoExecLog ALL chmod 755 "${CT_PREFIX_DIR}/bin/${CT_TARGET}-populate"
+    elif [ "${CT_KERNEL_ZEPHYR}" != "y" ]; then
+        CT_DoLog EXTRA "Installing the populate helper"
+        sed -r -e 's|@@CT_TARGET@@|'"${CT_TARGET}"'|g;' \
+               -e 's|@@CT_install@@|'"install"'|g;'     \
+               -e 's|@@CT_awk@@|'"awk"'|g;'             \
+               -e 's|@@CT_bash@@|'"${bash}"'|g;'           \
+               -e 's|@@CT_grep@@|'"grep"'|g;'           \
+               -e 's|@@CT_make@@|'"make"'|g;'           \
+               -e 's|@@CT_sed@@|'"sed"'|g;'             \
+               "${CT_LIB_DIR}/scripts/populate.in"         \
+               >"${CT_PREFIX_DIR}/bin/${CT_TARGET}-populate"
+        CT_DoExecLog ALL chmod 755 "${CT_PREFIX_DIR}/bin/${CT_TARGET}-populate"
     fi
 
+
+
+
     if [ "${CT_LIBC_XLDD}" = "y" ]; then
         CT_DoLog EXTRA "Installing a cross-ldd helper"
         sed -r -e 's|@@CT_VERSION@@|'"${CT_VERSION}"'|g;' \
diff --git a/scripts/build/kernel/zephyr.sh b/scripts/build/kernel/zephyr.sh
new file mode 100644
index 0000000..03c5b56
--- /dev/null
+++ b/scripts/build/kernel/zephyr.sh
@@ -0,0 +1,24 @@
+# This file declares functions for Zephyr OS
+# Copyright 2020 Moessner
+# Licensed under the GPL v2. See COPYING in the root of this package
+
+CT_DoKernelTupleValues()
+{
+    CT_DoStep INFO "Get Zephyr tuple"
+    CT_TARGET_KERNEL="zephyr"
+}
+
+do_kernel_get()
+{
+    CT_DoStep INFO "Fetch Zephyr source"
+}
+
+do_kernel_extract()
+{
+    CT_DoStep INFO "Extract Zephyr source"
+}
+
+do_kernel_headers()
+{
+    CT_DoStep INFO "Install Zephyr headers"
+}
diff --git a/scripts/config.sub b/scripts/config.sub
index 3b4c762..e5573b1 100755
--- a/scripts/config.sub
+++ b/scripts/config.sub
@@ -1365,7 +1365,7 @@ case $os in
 	     | powermax* | dnix* | nx6 | nx7 | sei* | dragonfly* \
 	     | skyos* | haiku* | rdos* | toppers* | drops* | es* \
 	     | onefs* | tirtos* | phoenix* | fuchsia* | redox* | bme* \
-	     | midnightbsd* | amdhsa* | unleashed* | emscripten*)
+	     | midnightbsd* | amdhsa* | unleashed* | emscripten* | zephyr*)
 	# Remember, each alternative MUST END IN *, to match a version number.
 		;;
 	qnx*)
-- 
2.7.4

